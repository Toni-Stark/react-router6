{"version":3,"sources":["pages/Home/index.tsx","router/home-routers.tsx","pages/Store/index.tsx","router/store-routers.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Home","props","navigator","useNavigate","className","onClick","type","homeRouters","name","element","children","style","padding","Store","storeRouters","App","useRoutes","useMemo","instantiation","route","index","key","path","map","item","locale","zh_CH","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAMaA,EAAO,SAACC,GACnB,IAAMC,EAAYC,cAElB,OACE,sBAAKC,UAAU,YAAf,UACE,sCACA,cAAC,IAAD,CACEC,QAAS,WACPH,EAAU,WAEZI,KAAK,OAJP,8BCROC,EAAc,CACzB,CACEC,KAAM,IACNC,QAAS,cAAC,IAAD,IACTC,SAAU,CACR,CACEF,KAAM,QACNC,QAAS,cAAC,EAAD,KAEX,CACED,KAAM,QACNC,QAAS,cAAC,EAAD,KAEX,CACED,KAAM,IACNC,QACE,sBAAME,MAAO,CAAEC,QAAS,QAAxB,SACE,qEChBCC,EAAQ,SAACZ,GACpB,IAAMC,EAAYC,cAElB,OACE,sBAAKC,UAAU,YAAf,UACE,uCACA,cAAC,IAAD,CACEC,QAAS,WACPH,EAAU,UAEZI,KAAK,OAJP,8BCPOQ,EAAe,CAC1B,CACEN,KAAM,SACNC,QAAS,cAAC,IAAD,IACTC,SAAU,CACR,CACEF,KAAM,QACNC,QAAS,cAAC,EAAD,KAEX,CACED,KAAM,IACNC,QACE,sBAAME,MAAO,CAAEC,QAAS,QAAxB,SACE,qE,yBCTCG,G,MAAM,WAEjB,IAAMC,EAAYC,mBAAQ,WACxB,IAAMC,EAAgB,SAAhBA,EAAiBC,GACrB,MAAmB,UAAfA,EAAMX,KACD,cAAC,IAAD,CAAuBY,OAAK,EAACX,QAASU,EAAMV,SAAhCU,EAAME,KAGvB,cAAC,IAAD,CAAuBC,KAAMH,EAAMX,KAAMC,QAASU,EAAMV,QAAxD,UACQ,OAALU,QAAK,IAALA,OAAA,EAAAA,EAAOT,WACNS,EAAMT,SAASa,KAAI,SAACC,EAAWH,GAC7B,OAAOH,EAAc,2BAAKM,GAAN,IAAYH,aAH1BF,EAAME,MASxB,OACE,eAAC,IAAD,kBACGd,QADH,IACGA,OADH,EACGA,EAAagB,KAAI,SAACC,EAAWH,GAC5B,OAAOH,EAAc,2BAAKM,GAAN,IAAYH,YAFpC,OAIGP,QAJH,IAIGA,OAJH,EAIGA,EAAcS,KAAI,SAACC,EAAWH,GAC7B,OAAOH,EAAc,2BAAKM,GAAN,IAAYH,iBAIrC,CAACd,EAAaO,IAEjB,OACE,cAAC,IAAD,CAAgBW,OAAQC,IAAxB,SACE,cAAC,IAAD,UAAaV,QC3BCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2925196.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\nimport \"./index.scss\";\r\ninterface Props {}\r\n\r\nexport const Home = (props: Partial<Props>): React.ReactElement => {\r\n  const navigator = useNavigate();\r\n\r\n  return (\r\n    <div className=\"home-body\">\r\n      <h1>Home</h1>\r\n      <Button\r\n        onClick={() => {\r\n          navigator(\"/store\");\r\n        }}\r\n        type=\"link\"\r\n      >\r\n        跳转\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { Home } from \"../pages/Home\";\r\n\r\nexport const homeRouters = [\r\n  {\r\n    name: \"/\",\r\n    element: <Outlet />,\r\n    children: [\r\n      {\r\n        name: \"index\",\r\n        element: <Home />,\r\n      },\r\n      {\r\n        name: \"/home\",\r\n        element: <Home />,\r\n      },\r\n      {\r\n        name: \"*\",\r\n        element: (\r\n          <main style={{ padding: \"1rem\" }}>\r\n            <p>页面丢失了</p>\r\n          </main>\r\n        ),\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"antd\";\r\ninterface Props {}\r\n\r\nexport const Store = (props: Partial<Props>): React.ReactElement => {\r\n  const navigator = useNavigate();\r\n\r\n  return (\r\n    <div className=\"home-body\">\r\n      <h1>Store</h1>\r\n      <Button\r\n        onClick={() => {\r\n          navigator(\"/home\");\r\n        }}\r\n        type=\"link\"\r\n      >\r\n        跳转\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { Store } from \"../pages/Store\";\r\n\r\nexport const storeRouters = [\r\n  {\r\n    name: \"/store\",\r\n    element: <Outlet />,\r\n    children: [\r\n      {\r\n        name: \"index\",\r\n        element: <Store />,\r\n      },\r\n      {\r\n        name: \"*\",\r\n        element: (\r\n          <main style={{ padding: \"1rem\" }}>\r\n            <p>页面丢失了</p>\r\n          </main>\r\n        ),\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React, { useMemo } from \"react\";\r\nimport { BrowserRouter, HashRouter, Route, Routes } from \"react-router-dom\";\r\nimport { homeRouters } from \"./router/home-routers\";\r\nimport { storeRouters } from \"./router/store-routers\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport zh_CH from \"antd/lib/locale-provider/zh_CN\";\r\nimport \"moment/locale/zh-cn\";\r\n\r\nexport const App = () => {\r\n  // useRouter() --- Hooks实现\r\n  const useRoutes = useMemo(() => {\r\n    const instantiation = (route: any) => {\r\n      if (route.name === \"index\") {\r\n        return <Route key={route.key} index element={route.element} />;\r\n      } else {\r\n        return (\r\n          <Route key={route.key} path={route.name} element={route.element}>\r\n            {route?.children &&\r\n              route.children.map((item: any, key: any) => {\r\n                return instantiation({ ...item, key });\r\n              })}\r\n          </Route>\r\n        );\r\n      }\r\n    };\r\n    return (\r\n      <Routes>\r\n        {homeRouters?.map((item: any, key: any) => {\r\n          return instantiation({ ...item, key });\r\n        })}\r\n        {storeRouters?.map((item: any, key: any) => {\r\n          return instantiation({ ...item, key });\r\n        })}\r\n      </Routes>\r\n    );\r\n  }, [homeRouters, storeRouters]);\r\n\r\n  return (\r\n    <ConfigProvider locale={zh_CH}>\r\n      <HashRouter>{useRoutes}</HashRouter>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.unregister();\r\n// reportWebVitals();\r\n"],"sourceRoot":""}